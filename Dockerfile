# Multi-stage Dockerfile for QTX monorepo
FROM node:20-alpine AS base

# Build arguments for ALL environment variables
ARG NEXT_PUBLIC_DASHBOARD_URL
ARG NEXT_PUBLIC_MARKETING_URL
ARG NEXT_PUBLIC_PUBLIC_API_URL
ARG DATABASE_URL
ARG EMAIL_FROM
ARG EMAIL_FEEDBACK_INBOX
ARG AUTH_SECRET
ARG BILLING_UNIT
ARG NEXT_PUBLIC_BILLING_STRIPE_PUBLISHABLE_KEY
ARG BILLING_STRIPE_SECRET_KEY
ARG BILLING_STRIPE_WEBHOOK_SECRET
ARG BILLING_PRO_PRODUCT_ID
ARG BILLING_PRO_PRODUCT_PRICE_ID
ARG EMAIL_RESEND_API_KEY
ARG EMAIL_NODEMAILER_URL
ARG NEXT_PUBLIC_ANALYTICS_GA_MEASUREMENT_ID
ARG NEXT_PUBLIC_ANALYTICS_POSTHOG_KEY
ARG NEXT_PUBLIC_ANALYTICS_POSTHOG_HOST
ARG NEXT_PUBLIC_ANALYTICS_UMAMI_HOST
ARG NEXT_PUBLIC_ANALYTICS_UMAMI_WEBSITE_ID
ARG AUTH_GOOGLE_CLIENT_ID
ARG AUTH_GOOGLE_CLIENT_SECRET
ARG AUTH_MICROSOFT_ENTRA_ID_CLIENT_ID
ARG AUTH_MICROSOFT_ENTRA_ID_CLIENT_SECRET
ARG MONITORING_SENTRY_ORG
ARG MONITORING_SENTRY_PROJECT
ARG MONITORING_SENTRY_AUTH_TOKEN
ARG NEXT_PUBLIC_MONITORING_SENTRY_DSN

# Set ALL environment variables from build args
ENV NEXT_PUBLIC_DASHBOARD_URL=${NEXT_PUBLIC_DASHBOARD_URL}
ENV NEXT_PUBLIC_MARKETING_URL=${NEXT_PUBLIC_MARKETING_URL}
ENV NEXT_PUBLIC_PUBLIC_API_URL=${NEXT_PUBLIC_PUBLIC_API_URL}
ENV DATABASE_URL=${DATABASE_URL}
ENV EMAIL_FROM=${EMAIL_FROM}
ENV EMAIL_FEEDBACK_INBOX=${EMAIL_FEEDBACK_INBOX}
ENV AUTH_SECRET=${AUTH_SECRET}
ENV BILLING_UNIT=${BILLING_UNIT}
ENV NEXT_PUBLIC_BILLING_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_BILLING_STRIPE_PUBLISHABLE_KEY}
ENV BILLING_STRIPE_SECRET_KEY=${BILLING_STRIPE_SECRET_KEY}
ENV BILLING_STRIPE_WEBHOOK_SECRET=${BILLING_STRIPE_WEBHOOK_SECRET}
ENV BILLING_PRO_PRODUCT_ID=${BILLING_PRO_PRODUCT_ID}
ENV BILLING_PRO_PRODUCT_PRICE_ID=${BILLING_PRO_PRODUCT_PRICE_ID}
ENV EMAIL_RESEND_API_KEY=${EMAIL_RESEND_API_KEY}
ENV EMAIL_NODEMAILER_URL=${EMAIL_NODEMAILER_URL}
ENV NEXT_PUBLIC_ANALYTICS_GA_MEASUREMENT_ID=${NEXT_PUBLIC_ANALYTICS_GA_MEASUREMENT_ID}
ENV NEXT_PUBLIC_ANALYTICS_POSTHOG_KEY=${NEXT_PUBLIC_ANALYTICS_POSTHOG_KEY}
ENV NEXT_PUBLIC_ANALYTICS_POSTHOG_HOST=${NEXT_PUBLIC_ANALYTICS_POSTHOG_HOST}
ENV NEXT_PUBLIC_ANALYTICS_UMAMI_HOST=${NEXT_PUBLIC_ANALYTICS_UMAMI_HOST}
ENV NEXT_PUBLIC_ANALYTICS_UMAMI_WEBSITE_ID=${NEXT_PUBLIC_ANALYTICS_UMAMI_WEBSITE_ID}
ENV AUTH_GOOGLE_CLIENT_ID=${AUTH_GOOGLE_CLIENT_ID}
ENV AUTH_GOOGLE_CLIENT_SECRET=${AUTH_GOOGLE_CLIENT_SECRET}
ENV AUTH_MICROSOFT_ENTRA_ID_CLIENT_ID=${AUTH_MICROSOFT_ENTRA_ID_CLIENT_ID}
ENV AUTH_MICROSOFT_ENTRA_ID_CLIENT_SECRET=${AUTH_MICROSOFT_ENTRA_ID_CLIENT_SECRET}
ENV MONITORING_SENTRY_ORG=${MONITORING_SENTRY_ORG}
ENV MONITORING_SENTRY_PROJECT=${MONITORING_SENTRY_PROJECT}
ENV MONITORING_SENTRY_AUTH_TOKEN=${MONITORING_SENTRY_AUTH_TOKEN}
ENV NEXT_PUBLIC_MONITORING_SENTRY_DSN=${NEXT_PUBLIC_MONITORING_SENTRY_DSN}

# Install pnpm and required build tools
RUN corepack enable && corepack prepare pnpm@latest --activate
RUN apk add --no-cache libc6-compat

# Set working directory
WORKDIR /app

# Copy all source code
COPY . .

# Install all dependencies (skip postinstall to avoid loop)
RUN pnpm install --frozen-lockfile --ignore-scripts

# Generate Prisma client
RUN cd packages/database && npx prisma generate

# Build the application
RUN pnpm build

# Production stage
FROM node:20-alpine AS runner
RUN corepack enable && corepack prepare pnpm@latest --activate

# Install supervisor to manage multiple processes
RUN apk add --no-cache supervisor

WORKDIR /app

# Copy necessary files from builder
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/package.json ./package.json
COPY --from=base /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=base /app/turbo.json ./turbo.json
COPY --from=base /app/apps ./apps
COPY --from=base /app/packages ./packages

# Copy supervisor config and start script
COPY supervisor.conf /etc/supervisor/conf.d/supervisord.conf
COPY start-with-logs.sh /start-with-logs.sh
RUN chmod +x /start-with-logs.sh

# Set default environment
ENV NODE_ENV=production

# Expose all three ports
EXPOSE 3000 3001 3002

# Start all apps with better logging
CMD ["/start-with-logs.sh"]